/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Background Check
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost/v1.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    screenName: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    province?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    city?: string;
}

/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    province?: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    city?: string;
}


/**
 * AccountApi - fetch parameter creator
 * @export
 */
export const AccountApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes an existing Account
         * @summary Deletes an Account
         * @param {number} id Account id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstanceDeleteAccount(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling appApiAccountClassInstanceDeleteAccount.');
            }
            const localVarPath = `/account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single Account
         * @summary Find Account by ID
         * @param {number} id ID of Account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstanceGetAccount(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling appApiAccountClassInstanceGetAccount.');
            }
            const localVarPath = `/account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all the accounts stored in the database
         * @summary Gets all accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstanceGetAllAccounts(options: any = {}): FetchArgs {
            const localVarPath = `/account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new Account
         * @param {Account} account Account object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstancePostAccount(account: Account, options: any = {}): FetchArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling appApiAccountClassInstancePostAccount.');
            }
            const localVarPath = `/account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Account" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(account || {}) : (account || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing account with new information
         * @summary Update an existing Account
         * @param {Account} account Account object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstancePutAccountDetails(account: Account, options: any = {}): FetchArgs {
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new RequiredError('account','Required parameter account was null or undefined when calling appApiAccountClassInstancePutAccountDetails.');
            }
            const localVarPath = `/account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Account" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(account || {}) : (account || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes an existing Account
         * @summary Deletes an Account
         * @param {number} id Account id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstanceDeleteAccount(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).appApiAccountClassInstanceDeleteAccount(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a single Account
         * @summary Find Account by ID
         * @param {number} id ID of Account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstanceGetAccount(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Account> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).appApiAccountClassInstanceGetAccount(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Gets all the accounts stored in the database
         * @summary Gets all accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstanceGetAllAccounts(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).appApiAccountClassInstanceGetAllAccounts(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add a new Account
         * @param {Account} account Account object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstancePostAccount(account: Account, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).appApiAccountClassInstancePostAccount(account, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an existing account with new information
         * @summary Update an existing Account
         * @param {Account} account Account object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstancePutAccountDetails(account: Account, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).appApiAccountClassInstancePutAccountDetails(account, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Deletes an existing Account
         * @summary Deletes an Account
         * @param {number} id Account id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstanceDeleteAccount(id: number, options?: any) {
            return AccountApiFp(configuration).appApiAccountClassInstanceDeleteAccount(id, options)(fetch, basePath);
        },
        /**
         * Returns a single Account
         * @summary Find Account by ID
         * @param {number} id ID of Account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstanceGetAccount(id: number, options?: any) {
            return AccountApiFp(configuration).appApiAccountClassInstanceGetAccount(id, options)(fetch, basePath);
        },
        /**
         * Gets all the accounts stored in the database
         * @summary Gets all accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstanceGetAllAccounts(options?: any) {
            return AccountApiFp(configuration).appApiAccountClassInstanceGetAllAccounts(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add a new Account
         * @param {Account} account Account object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstancePostAccount(account: Account, options?: any) {
            return AccountApiFp(configuration).appApiAccountClassInstancePostAccount(account, options)(fetch, basePath);
        },
        /**
         * Updates an existing account with new information
         * @summary Update an existing Account
         * @param {Account} account Account object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiAccountClassInstancePutAccountDetails(account: Account, options?: any) {
            return AccountApiFp(configuration).appApiAccountClassInstancePutAccountDetails(account, options)(fetch, basePath);
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * Deletes an existing Account
     * @summary Deletes an Account
     * @param {number} id Account id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public appApiAccountClassInstanceDeleteAccount(id: number, options?: any) {
        return AccountApiFp(this.configuration).appApiAccountClassInstanceDeleteAccount(id, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a single Account
     * @summary Find Account by ID
     * @param {number} id ID of Account to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public appApiAccountClassInstanceGetAccount(id: number, options?: any) {
        return AccountApiFp(this.configuration).appApiAccountClassInstanceGetAccount(id, options)(this.fetch, this.basePath);
    }

    /**
     * Gets all the accounts stored in the database
     * @summary Gets all accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public appApiAccountClassInstanceGetAllAccounts(options?: any) {
        return AccountApiFp(this.configuration).appApiAccountClassInstanceGetAllAccounts(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add a new Account
     * @param {Account} account Account object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public appApiAccountClassInstancePostAccount(account: Account, options?: any) {
        return AccountApiFp(this.configuration).appApiAccountClassInstancePostAccount(account, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an existing account with new information
     * @summary Update an existing Account
     * @param {Account} account Account object that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public appApiAccountClassInstancePutAccountDetails(account: Account, options?: any) {
        return AccountApiFp(this.configuration).appApiAccountClassInstancePutAccountDetails(account, options)(this.fetch, this.basePath);
    }

}

/**
 * ProfileApi - fetch parameter creator
 * @export
 */
export const ProfileApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes an existing Profile from the Database
         * @summary Deletes a Profile
         * @param {number} id The Profile to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstanceDeleteProfile(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling appApiProfileClassInstanceDeleteProfile.');
            }
            const localVarPath = `/profile/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all the Profiles stored in the Database
         * @summary Gets all Profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstanceGetAllProfiles(options: any = {}): FetchArgs {
            const localVarPath = `/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single, existing Profile from the Database
         * @summary Gets a single Profile
         * @param {number} id The Profile object to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstanceGetProfile(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling appApiProfileClassInstanceGetProfile.');
            }
            const localVarPath = `/profile/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new Profile with a First, Middle, and Last name, City and Province
         * @summary Add a new profile
         * @param {Profile} profile The Profile object to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstancePostProfile(profile: Profile, options: any = {}): FetchArgs {
            // verify required parameter 'profile' is not null or undefined
            if (profile === null || profile === undefined) {
                throw new RequiredError('profile','Required parameter profile was null or undefined when calling appApiProfileClassInstancePostProfile.');
            }
            const localVarPath = `/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Profile" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(profile || {}) : (profile || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing Profile's information
         * @summary Update Profile Information
         * @param {Profile} profile The Profile object with updated information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstancePutProfileDetails(profile: Profile, options: any = {}): FetchArgs {
            // verify required parameter 'profile' is not null or undefined
            if (profile === null || profile === undefined) {
                throw new RequiredError('profile','Required parameter profile was null or undefined when calling appApiProfileClassInstancePutProfileDetails.');
            }
            const localVarPath = `/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Profile" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(profile || {}) : (profile || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes an existing Profile from the Database
         * @summary Deletes a Profile
         * @param {number} id The Profile to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstanceDeleteProfile(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).appApiProfileClassInstanceDeleteProfile(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Gets all the Profiles stored in the Database
         * @summary Gets all Profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstanceGetAllProfiles(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).appApiProfileClassInstanceGetAllProfiles(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single, existing Profile from the Database
         * @summary Gets a single Profile
         * @param {number} id The Profile object to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstanceGetProfile(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).appApiProfileClassInstanceGetProfile(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds a new Profile with a First, Middle, and Last name, City and Province
         * @summary Add a new profile
         * @param {Profile} profile The Profile object to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstancePostProfile(profile: Profile, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).appApiProfileClassInstancePostProfile(profile, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates an existing Profile's information
         * @summary Update Profile Information
         * @param {Profile} profile The Profile object with updated information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstancePutProfileDetails(profile: Profile, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ProfileApiFetchParamCreator(configuration).appApiProfileClassInstancePutProfileDetails(profile, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Deletes an existing Profile from the Database
         * @summary Deletes a Profile
         * @param {number} id The Profile to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstanceDeleteProfile(id: number, options?: any) {
            return ProfileApiFp(configuration).appApiProfileClassInstanceDeleteProfile(id, options)(fetch, basePath);
        },
        /**
         * Gets all the Profiles stored in the Database
         * @summary Gets all Profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstanceGetAllProfiles(options?: any) {
            return ProfileApiFp(configuration).appApiProfileClassInstanceGetAllProfiles(options)(fetch, basePath);
        },
        /**
         * Retrieves a single, existing Profile from the Database
         * @summary Gets a single Profile
         * @param {number} id The Profile object to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstanceGetProfile(id: number, options?: any) {
            return ProfileApiFp(configuration).appApiProfileClassInstanceGetProfile(id, options)(fetch, basePath);
        },
        /**
         * Adds a new Profile with a First, Middle, and Last name, City and Province
         * @summary Add a new profile
         * @param {Profile} profile The Profile object to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstancePostProfile(profile: Profile, options?: any) {
            return ProfileApiFp(configuration).appApiProfileClassInstancePostProfile(profile, options)(fetch, basePath);
        },
        /**
         * Updates an existing Profile's information
         * @summary Update Profile Information
         * @param {Profile} profile The Profile object with updated information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appApiProfileClassInstancePutProfileDetails(profile: Profile, options?: any) {
            return ProfileApiFp(configuration).appApiProfileClassInstancePutProfileDetails(profile, options)(fetch, basePath);
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * Deletes an existing Profile from the Database
     * @summary Deletes a Profile
     * @param {number} id The Profile to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public appApiProfileClassInstanceDeleteProfile(id: number, options?: any) {
        return ProfileApiFp(this.configuration).appApiProfileClassInstanceDeleteProfile(id, options)(this.fetch, this.basePath);
    }

    /**
     * Gets all the Profiles stored in the Database
     * @summary Gets all Profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public appApiProfileClassInstanceGetAllProfiles(options?: any) {
        return ProfileApiFp(this.configuration).appApiProfileClassInstanceGetAllProfiles(options)(this.fetch, this.basePath);
    }

    /**
     * Retrieves a single, existing Profile from the Database
     * @summary Gets a single Profile
     * @param {number} id The Profile object to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public appApiProfileClassInstanceGetProfile(id: number, options?: any) {
        return ProfileApiFp(this.configuration).appApiProfileClassInstanceGetProfile(id, options)(this.fetch, this.basePath);
    }

    /**
     * Adds a new Profile with a First, Middle, and Last name, City and Province
     * @summary Add a new profile
     * @param {Profile} profile The Profile object to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public appApiProfileClassInstancePostProfile(profile: Profile, options?: any) {
        return ProfileApiFp(this.configuration).appApiProfileClassInstancePostProfile(profile, options)(this.fetch, this.basePath);
    }

    /**
     * Updates an existing Profile's information
     * @summary Update Profile Information
     * @param {Profile} profile The Profile object with updated information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public appApiProfileClassInstancePutProfileDetails(profile: Profile, options?: any) {
        return ProfileApiFp(this.configuration).appApiProfileClassInstancePutProfileDetails(profile, options)(this.fetch, this.basePath);
    }

}

